import asyncio

from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton

from logging_settings import logger
from tg_bot.database.sqlite import SQLiteDatabase
from tg_bot.services.ufuncs import clear_delete_list
from tg_bot.states.trener import FSMTrener

router = Router()


@router.message(F.text.lower().strip() == '–≤–µ—Ä–Ω—É—Ç—å—Å—è', StateFilter(FSMTrener.workout))
@router.message(F.text.lower().strip() == '–≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', StateFilter(FSMTrener.workout))
@router.message(F.text.lower().strip() == '–æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', StateFilter(FSMTrener.workout))
async def start_trener(message: Message, state: FSMContext, db: SQLiteDatabase, bot: Bot):
    data = await state.get_data()
    data['delete_list'].append(message.message_id)
    data['delete_list'] = await clear_delete_list(data['delete_list'], bot, message.from_user.id)
    await asyncio.sleep(1)
    exercises_table = db.select_table('exercises')
    if exercises_table:
        captions = ['----------–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø-----']
        captions_timer = ['----------–¢–ê–ô–ú–ï–†–´-----']
        captions_warmup = ['----------–†–ê–ó–ú–ò–ù–ö–ò-----']
        captions_cooldown = ['----------–ó–ê–ú–ò–ù–ö–ò-----']
        captions_workout = ['----------–¢–†–ï–ù–ò–†–û–í–ö–ò-----']
        for exercise in exercises_table:
            exercise_list = db.select_rows(table='exercises_users', fetch='one',
                                           exercise_id=exercise['exercise_id'], user_id=message.from_user.id)
            exercise_type = db.select_rows(table='exercises', fetch='one', exercise_id=exercise['exercise_id'])['type']
            # exercise_type = exercise_list['type'] if exercise_list else None
            logger.debug(f'{exercise_list=}')
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            if exercise_type in [1, 2]:
                if exercise_list:
                    if exercise_list['list'] == 1:
                        captions.append(('üíö' + str(exercise['exercise_id'])).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                    elif exercise_list['list'] == 0:
                        captions.append(('‚õî' + str(exercise['exercise_id'])).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                    else:
                        captions.append('  ' + str(exercise['exercise_id']).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                else:
                    captions.append('  ' + str(exercise['exercise_id']).rjust(3, '‚†Ä') + ' ' + exercise['name'])
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
            logger.debug(f'before timer list {captions=}')
            if exercise_type in [8]:
                if exercise_list:
                    if exercise_list['list'] == 1:
                        captions_timer.append(('‚úÖ' + str(exercise['exercise_id'])).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                    elif exercise_list['list'] == 0:
                        captions_timer.append(('  ' + str(exercise['exercise_id'])).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                    else:
                        captions_timer.append('  ' + str(exercise['exercise_id']).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                else:
                    captions_timer.append('  ' + str(exercise['exercise_id']).rjust(3, '‚†Ä') + ' ' + exercise['name'])
            logger.debug(f'after timer list {captions_timer=}')
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–∏–Ω–æ–∫
            if exercise_type in [5]:
                if exercise_list:
                    if exercise_list['list'] == 1:
                        captions_warmup.append(('‚úÖ' + str(exercise['exercise_id'])).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                    elif exercise_list['list'] == 0:
                        captions_warmup.append(('  ' + str(exercise['exercise_id'])).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                    else:
                        captions_warmup.append('  ' + str(exercise['exercise_id']).rjust(3, '‚†Ä') + ' ' + exercise['name'])
                else:
                    captions_warmup.append('  ' + str(exercise['exercise_id']).rjust(3, '‚†Ä') + ' ' + exercise['name'])
        # i = 1
        # msg_ = {1: ''}
        # statistics = captions + captions_timer
        # logger.debug(f'{statistics=}')
        # for workout in statistics:
        #     if len(msg_[i]) > 4000:
        #         msg = await message.answer(text=msg_[i])
        #         data['delete_list'].append(msg.message_id)
        #         i += 1
        #         msg_[i] = ''
        #     msg_[i] += statistics[workout] + '\n'
        # msg = await message.answer(text=msg_[i], reply_markup=ReplyKeyboardRemove())
        # data['delete_list'].append(msg.message_id)
        msg = await message.answer(text='\n'.join(captions+captions_timer+captions_warmup),
                                   reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMTrener.workout)
    else:
        msg = await message.answer(text='–°–±–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
                                   reply_markup=ReplyKeyboardRemove())
        await state.set_state(FSMTrener.show_exercises)
    data['delete_list'].append(msg.message_id)
    msg = await message.answer(text='–ö–û–ú–ê–ù–î–´:\n'
                                    '–ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä —á—Ç–æ–±—ã –í–´–ü–û–õ–ù–ò–¢–¨ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ;\n'
                                    '!-–Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –ù–ï –ú–û–ñ–ï–¢–ï –¥–µ–ª–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ;\n'
                                    '!+–Ω–æ–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –õ–Æ–ë–ò–¢–ï —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ;\n'
                                    '!=–Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã –°–ë–†–û–°–ò–¢–¨ –ø–æ–º–µ—Ç–∫–∏.\n',
                               reply_markup=ReplyKeyboardRemove())
    data['delete_list'].append(msg.message_id)
    await state.update_data(delete_list=data['delete_list'])


@router.message(F.text.startswith('!='), F.text.strip()[2:].isdigit(), StateFilter(FSMTrener.workout))
async def add_white_list(message: Message, state: FSMContext, db: SQLiteDatabase):
    """
    :param message:
    :param state:
    :param db:
    :return:
    1. –ò—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    2. –ï—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –º–µ–Ω—è–µ–º –ø–æ–ª–µ list –Ω–∞ –Ω—É–∂–Ω–æ–µ
    3. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å –Ω—É–∂–Ω—ã–º –ø–æ–ª–µ–º list
    """
    data = await state.get_data()
    data['delete_list'].append(message.message_id)
    exercise_id = int(message.text.strip()[2:])
    exercises_users = db.select_rows(table='exercises_users', fetch='one', exercise_id=exercise_id, user_id=message.from_user.id)
    if exercises_users:
        db.update_cell_new(table='exercises_users', cell='list', cell_value=None,
                           exercise_id=exercise_id, user_id=message.from_user.id)
    else:
        db.add_exercise_user(user_id=message.from_user.id, exercise_id=exercise_id)
    msg = await message.answer(text='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
                               reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫')]],
                                                                one_time_keyboard=True, resize_keyboard=True))
    data['delete_list'].append(msg.message_id)
    await state.update_data(delete_list=data['delete_list'])


@router.message(F.text.startswith('!+'), F.text.strip()[2:].isdigit(), StateFilter(FSMTrener.workout))
async def add_white_list(message: Message, state: FSMContext, db: SQLiteDatabase):
    """
    :param message:
    :param state:
    :param db:
    :return:
    1. –ò—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    2. –ï—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –º–µ–Ω—è–µ–º –ø–æ–ª–µ list –Ω–∞ –Ω—É–∂–Ω–æ–µ
    3. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å –Ω—É–∂–Ω—ã–º –ø–æ–ª–µ–º list
    """
    data = await state.get_data()
    data['delete_list'].append(message.message_id)
    exercise_id = int(message.text.strip()[2:])
    exercises_users = db.select_rows(table='exercises_users', fetch='one', exercise_id=exercise_id, user_id=message.from_user.id)
    if exercises_users:
        logger.debug(f'{exercises_users=}')
        db.update_cell_new(table='exercises_users', cell='list', cell_value=1,
                           exercise_id=exercise_id, user_id=message.from_user.id)
    else:
        db.add_exercise_user(user_id=message.from_user.id, exercise_id=exercise_id, list_=1)
    msg = await message.answer(text='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
                               reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫')]],
                                                                one_time_keyboard=True, resize_keyboard=True))
    data['delete_list'].append(msg.message_id)
    await state.update_data(delete_list=data['delete_list'])


@router.message(F.text.startswith('!-'), F.text.strip()[2:].isdigit(), StateFilter(FSMTrener.workout))
async def add_white_list(message: Message, state: FSMContext, db: SQLiteDatabase):
    """
    :param message:
    :param state:
    :param db:
    :return:
    1. –ò—â–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ
    2. –ï—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –º–µ–Ω—è–µ–º –ø–æ–ª–µ list –Ω–∞ –Ω—É–∂–Ω–æ–µ
    3. –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å –Ω—É–∂–Ω—ã–º –ø–æ–ª–µ–º list
    """
    data = await state.get_data()
    data['delete_list'].append(message.message_id)
    exercise_id = int(message.text.strip()[2:])
    exercises_users = db.select_rows(table='exercises', fetch='one', exercise_id=exercise_id, user_id=message.from_user.id)
    if exercises_users:
        if exercises_users['type'] in [5, 6, 8]:
            msg = await message.answer(text='–¢–∞–π–º–µ—Ä, —Ä–∞–∑–º–∏–Ω–∫—É –∏ –∑–∞–º–∏–Ω–∫—É –Ω–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!',
                                       reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è')]],
                                                                        one_time_keyboard=True, resize_keyboard=True))
        else:
            db.update_cell_new(table='exercises_users', cell='list', cell_value=0,
                               exercise_id=exercise_id, user_id=message.from_user.id)
            msg = await message.answer(text='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è.',
                                       reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫')]],
                                                                        one_time_keyboard=True, resize_keyboard=True))
        data['delete_list'].append(msg.message_id)
    # else:
    #     if exercises_users['type'] in [8]:
    #         db.add_exercise_user(user_id=message.from_user.id, exercise_id=exercise_id, list_=None)
    #         msg = await message.answer(text='–¢–∞–π–º–µ—Ä –Ω–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!',
    #                                    reply_markup=ReplyKeyboardRemove())
    #     else:
    #         db.add_exercise_user(user_id=message.from_user.id, exercise_id=exercise_id, list_=0)
    #         msg = await message.answer(text='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å—Å—è.',
    #                                    reply_markup=ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫')]],
    #                                                                     one_time_keyboard=True, resize_keyboard=True))
    # data['delete_list'].append(msg.message_id)
    await state.update_data(delete_list=data['delete_list'])
